// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cSparseBCF
List cSparseBCF(NumericVector y_, NumericVector z_, NumericVector x_con_, NumericVector x_mod_, NumericVector x_mod_est_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, double a, double b, double rho, double rho_tau, double theta, double omega, NumericVector weights_mu, NumericVector weights_tau, CharacterVector treef_name_mu_, CharacterVector treef_name_tau_, bool dart, bool aug, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, double trt_init);
RcppExport SEXP _SparseBCF_cSparseBCF(SEXP y_SEXP, SEXP z_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_mod_est_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP rhoSEXP, SEXP rho_tauSEXP, SEXP thetaSEXP, SEXP omegaSEXP, SEXP weights_muSEXP, SEXP weights_tauSEXP, SEXP treef_name_mu_SEXP, SEXP treef_name_tau_SEXP, SEXP dartSEXP, SEXP augSEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP trt_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_est_(x_mod_est_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type rho_tau(rho_tauSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights_mu(weights_muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights_tau(weights_tauSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_mu_(treef_name_mu_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_tau_(treef_name_tau_SEXP);
    Rcpp::traits::input_parameter< bool >::type dart(dartSEXP);
    Rcpp::traits::input_parameter< bool >::type aug(augSEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    rcpp_result_gen = Rcpp::wrap(cSparseBCF(y_, z_, x_con_, x_mod_, x_mod_est_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, a, b, rho, rho_tau, theta, omega, weights_mu, weights_tau, treef_name_mu_, treef_name_tau_, dart, aug, status_interval, RJ, use_mscale, use_bscale, b_half_normal, trt_init));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_TreeSamples();

static const R_CallMethodDef CallEntries[] = {
    {"_SparseBCF_cSparseBCF", (DL_FUNC) &_SparseBCF_cSparseBCF, 42},
    {"_rcpp_module_boot_TreeSamples", (DL_FUNC) &_rcpp_module_boot_TreeSamples, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SparseBCF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
